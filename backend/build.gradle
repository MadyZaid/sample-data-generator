/*
 * Copyright 2016 Open mHealth
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: "java"
apply plugin: "spring-boot"

buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }

    ext {
        springBootVersion = "1.3.3.RELEASE"
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

repositories {
    mavenLocal()
    jcenter()
}

ext {
    javaVersion = 1.8
    omhSchemaSdkVersion = "1.0.5"
}

group = "org.openmhealth.generator"
version = "1.1.0"

jar {
    baseName = 'data-generator'
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion


dependencies {
    compile "org.apache.commons:commons-math3:3.5"
    compile "com.google.guava:guava:18.0"
    compile "com.fasterxml.jackson.core:jackson-annotations"
    compile "com.fasterxml.jackson.core:jackson-databind"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"
    compile "org.openmhealth.schema:omh-schema-sdk:${omhSchemaSdkVersion}"
    compile "org.slf4j:slf4j-api"
    compile "org.springframework:spring-beans"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.springframework:spring-context"
    compile "javax.validation:validation-api:1.1.0.Final"

    testCompile "org.hamcrest:hamcrest-library"
    testCompile "org.mockito:mockito-core"
    testCompile "org.springframework:spring-test"
    testCompile "org.testng:testng:6.8.21"

    runtime "org.hibernate:hibernate-validator"
    runtime "javax.el:javax.el-api:3.0.0"
    runtime 'org.slf4j:jcl-over-slf4j'
    runtime 'org.slf4j:log4j-over-slf4j'
    runtime "ch.qos.logback:logback-classic"
    runtime "org.yaml:snakeyaml"
}

test {
    useTestNG()
    workingDir = '..'
}

task copyArchiveJarToDockerContext(dependsOn: assemble, type: Copy) {
    from 'build/libs'
    into 'docker'
    include "${jar.archiveName}"
    rename { String fileName ->
        fileName.replace("${jar.archiveName}", "${jar.baseName}.jar")
    }
}
build.dependsOn copyArchiveJarToDockerContext

task deleteArchiveJarFromDockerContext(type: Delete) {
    delete "docker/${jar.baseName}.jar"
}
clean.dependsOn deleteArchiveJarFromDockerContext